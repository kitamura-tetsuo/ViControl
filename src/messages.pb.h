// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto;
class Point;
struct PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Point* Arena::CreateMaybeMessage<::Point>(Arena*);
template<> ::Request* Arena::CreateMaybeMessage<::Request>(Arena*);
template<> ::Response* Arena::CreateMaybeMessage<::Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Point final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  ~Point() override;
  explicit PROTOBUF_CONSTEXPR Point(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Point& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Point& from) {
    Point::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // sint32 x = 1;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // sint32 y = 2;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t x_;
    int32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  ~Request() override;
  explicit PROTOBUF_CONSTEXPR Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Request& from) {
    Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPressKeysFieldNumber = 4,
    kReleaseKeysFieldNumber = 5,
    kProcessNameFieldNumber = 3,
    kMouseFieldNumber = 6,
    kClientMouseFieldNumber = 7,
    kQualityFieldNumber = 2,
    kGetImageFieldNumber = 1,
    kGetKeysFieldNumber = 8,
    kGetMouseFieldNumber = 9,
    kAllowUserOverrideFieldNumber = 10,
  };
  // repeated string press_keys = 4;
  int press_keys_size() const;
  private:
  int _internal_press_keys_size() const;
  public:
  void clear_press_keys();
  const std::string& press_keys(int index) const;
  std::string* mutable_press_keys(int index);
  void set_press_keys(int index, const std::string& value);
  void set_press_keys(int index, std::string&& value);
  void set_press_keys(int index, const char* value);
  void set_press_keys(int index, const char* value, size_t size);
  std::string* add_press_keys();
  void add_press_keys(const std::string& value);
  void add_press_keys(std::string&& value);
  void add_press_keys(const char* value);
  void add_press_keys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& press_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_press_keys();
  private:
  const std::string& _internal_press_keys(int index) const;
  std::string* _internal_add_press_keys();
  public:

  // repeated string release_keys = 5;
  int release_keys_size() const;
  private:
  int _internal_release_keys_size() const;
  public:
  void clear_release_keys();
  const std::string& release_keys(int index) const;
  std::string* mutable_release_keys(int index);
  void set_release_keys(int index, const std::string& value);
  void set_release_keys(int index, std::string&& value);
  void set_release_keys(int index, const char* value);
  void set_release_keys(int index, const char* value, size_t size);
  std::string* add_release_keys();
  void add_release_keys(const std::string& value);
  void add_release_keys(std::string&& value);
  void add_release_keys(const char* value);
  void add_release_keys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& release_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_release_keys();
  private:
  const std::string& _internal_release_keys(int index) const;
  std::string* _internal_add_release_keys();
  public:

  // string process_name = 3;
  void clear_process_name();
  const std::string& process_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_process_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_process_name();
  PROTOBUF_NODISCARD std::string* release_process_name();
  void set_allocated_process_name(std::string* process_name);
  private:
  const std::string& _internal_process_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_process_name(const std::string& value);
  std::string* _internal_mutable_process_name();
  public:

  // .Point mouse = 6;
  bool has_mouse() const;
  private:
  bool _internal_has_mouse() const;
  public:
  void clear_mouse();
  const ::Point& mouse() const;
  PROTOBUF_NODISCARD ::Point* release_mouse();
  ::Point* mutable_mouse();
  void set_allocated_mouse(::Point* mouse);
  private:
  const ::Point& _internal_mouse() const;
  ::Point* _internal_mutable_mouse();
  public:
  void unsafe_arena_set_allocated_mouse(
      ::Point* mouse);
  ::Point* unsafe_arena_release_mouse();

  // .Point client_mouse = 7;
  bool has_client_mouse() const;
  private:
  bool _internal_has_client_mouse() const;
  public:
  void clear_client_mouse();
  const ::Point& client_mouse() const;
  PROTOBUF_NODISCARD ::Point* release_client_mouse();
  ::Point* mutable_client_mouse();
  void set_allocated_client_mouse(::Point* client_mouse);
  private:
  const ::Point& _internal_client_mouse() const;
  ::Point* _internal_mutable_client_mouse();
  public:
  void unsafe_arena_set_allocated_client_mouse(
      ::Point* client_mouse);
  ::Point* unsafe_arena_release_client_mouse();

  // uint32 quality = 2;
  void clear_quality();
  uint32_t quality() const;
  void set_quality(uint32_t value);
  private:
  uint32_t _internal_quality() const;
  void _internal_set_quality(uint32_t value);
  public:

  // bool get_image = 1;
  void clear_get_image();
  bool get_image() const;
  void set_get_image(bool value);
  private:
  bool _internal_get_image() const;
  void _internal_set_get_image(bool value);
  public:

  // bool get_keys = 8;
  void clear_get_keys();
  bool get_keys() const;
  void set_get_keys(bool value);
  private:
  bool _internal_get_keys() const;
  void _internal_set_get_keys(bool value);
  public:

  // bool get_mouse = 9;
  void clear_get_mouse();
  bool get_mouse() const;
  void set_get_mouse(bool value);
  private:
  bool _internal_get_mouse() const;
  void _internal_set_get_mouse(bool value);
  public:

  // bool allow_user_override = 10;
  void clear_allow_user_override();
  bool allow_user_override() const;
  void set_allow_user_override(bool value);
  private:
  bool _internal_allow_user_override() const;
  void _internal_set_allow_user_override(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> press_keys_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> release_keys_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr process_name_;
    ::Point* mouse_;
    ::Point* client_mouse_;
    uint32_t quality_;
    bool get_image_;
    bool get_keys_;
    bool get_mouse_;
    bool allow_user_override_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  explicit PROTOBUF_CONSTEXPR Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Response& from) {
    Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPressedKeysFieldNumber = 3,
    kErrorFieldNumber = 1,
    kImageFieldNumber = 2,
    kMouseFieldNumber = 4,
  };
  // repeated string pressed_keys = 3;
  int pressed_keys_size() const;
  private:
  int _internal_pressed_keys_size() const;
  public:
  void clear_pressed_keys();
  const std::string& pressed_keys(int index) const;
  std::string* mutable_pressed_keys(int index);
  void set_pressed_keys(int index, const std::string& value);
  void set_pressed_keys(int index, std::string&& value);
  void set_pressed_keys(int index, const char* value);
  void set_pressed_keys(int index, const char* value, size_t size);
  std::string* add_pressed_keys();
  void add_pressed_keys(const std::string& value);
  void add_pressed_keys(std::string&& value);
  void add_pressed_keys(const char* value);
  void add_pressed_keys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& pressed_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_pressed_keys();
  private:
  const std::string& _internal_pressed_keys(int index) const;
  std::string* _internal_add_pressed_keys();
  public:

  // string error = 1;
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // bytes image = 2;
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_NODISCARD std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // .Point mouse = 4;
  bool has_mouse() const;
  private:
  bool _internal_has_mouse() const;
  public:
  void clear_mouse();
  const ::Point& mouse() const;
  PROTOBUF_NODISCARD ::Point* release_mouse();
  ::Point* mutable_mouse();
  void set_allocated_mouse(::Point* mouse);
  private:
  const ::Point& _internal_mouse() const;
  ::Point* _internal_mutable_mouse();
  public:
  void unsafe_arena_set_allocated_mouse(
      ::Point* mouse);
  ::Point* unsafe_arena_release_mouse();

  // @@protoc_insertion_point(class_scope:Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> pressed_keys_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
    ::Point* mouse_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point

// sint32 x = 1;
inline void Point::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t Point::_internal_x() const {
  return _impl_.x_;
}
inline int32_t Point::x() const {
  // @@protoc_insertion_point(field_get:Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void Point::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Point.x)
}

// sint32 y = 2;
inline void Point::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t Point::_internal_y() const {
  return _impl_.y_;
}
inline int32_t Point::y() const {
  // @@protoc_insertion_point(field_get:Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void Point::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Point.y)
}

// -------------------------------------------------------------------

// Request

// bool get_image = 1;
inline void Request::clear_get_image() {
  _impl_.get_image_ = false;
}
inline bool Request::_internal_get_image() const {
  return _impl_.get_image_;
}
inline bool Request::get_image() const {
  // @@protoc_insertion_point(field_get:Request.get_image)
  return _internal_get_image();
}
inline void Request::_internal_set_get_image(bool value) {
  
  _impl_.get_image_ = value;
}
inline void Request::set_get_image(bool value) {
  _internal_set_get_image(value);
  // @@protoc_insertion_point(field_set:Request.get_image)
}

// uint32 quality = 2;
inline void Request::clear_quality() {
  _impl_.quality_ = 0u;
}
inline uint32_t Request::_internal_quality() const {
  return _impl_.quality_;
}
inline uint32_t Request::quality() const {
  // @@protoc_insertion_point(field_get:Request.quality)
  return _internal_quality();
}
inline void Request::_internal_set_quality(uint32_t value) {
  
  _impl_.quality_ = value;
}
inline void Request::set_quality(uint32_t value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:Request.quality)
}

// string process_name = 3;
inline void Request::clear_process_name() {
  _impl_.process_name_.ClearToEmpty();
}
inline const std::string& Request::process_name() const {
  // @@protoc_insertion_point(field_get:Request.process_name)
  return _internal_process_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Request::set_process_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.process_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Request.process_name)
}
inline std::string* Request::mutable_process_name() {
  std::string* _s = _internal_mutable_process_name();
  // @@protoc_insertion_point(field_mutable:Request.process_name)
  return _s;
}
inline const std::string& Request::_internal_process_name() const {
  return _impl_.process_name_.Get();
}
inline void Request::_internal_set_process_name(const std::string& value) {
  
  _impl_.process_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Request::_internal_mutable_process_name() {
  
  return _impl_.process_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Request::release_process_name() {
  // @@protoc_insertion_point(field_release:Request.process_name)
  return _impl_.process_name_.Release();
}
inline void Request::set_allocated_process_name(std::string* process_name) {
  if (process_name != nullptr) {
    
  } else {
    
  }
  _impl_.process_name_.SetAllocated(process_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.process_name_.IsDefault()) {
    _impl_.process_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Request.process_name)
}

// repeated string press_keys = 4;
inline int Request::_internal_press_keys_size() const {
  return _impl_.press_keys_.size();
}
inline int Request::press_keys_size() const {
  return _internal_press_keys_size();
}
inline void Request::clear_press_keys() {
  _impl_.press_keys_.Clear();
}
inline std::string* Request::add_press_keys() {
  std::string* _s = _internal_add_press_keys();
  // @@protoc_insertion_point(field_add_mutable:Request.press_keys)
  return _s;
}
inline const std::string& Request::_internal_press_keys(int index) const {
  return _impl_.press_keys_.Get(index);
}
inline const std::string& Request::press_keys(int index) const {
  // @@protoc_insertion_point(field_get:Request.press_keys)
  return _internal_press_keys(index);
}
inline std::string* Request::mutable_press_keys(int index) {
  // @@protoc_insertion_point(field_mutable:Request.press_keys)
  return _impl_.press_keys_.Mutable(index);
}
inline void Request::set_press_keys(int index, const std::string& value) {
  _impl_.press_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Request.press_keys)
}
inline void Request::set_press_keys(int index, std::string&& value) {
  _impl_.press_keys_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Request.press_keys)
}
inline void Request::set_press_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.press_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Request.press_keys)
}
inline void Request::set_press_keys(int index, const char* value, size_t size) {
  _impl_.press_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Request.press_keys)
}
inline std::string* Request::_internal_add_press_keys() {
  return _impl_.press_keys_.Add();
}
inline void Request::add_press_keys(const std::string& value) {
  _impl_.press_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Request.press_keys)
}
inline void Request::add_press_keys(std::string&& value) {
  _impl_.press_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Request.press_keys)
}
inline void Request::add_press_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.press_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Request.press_keys)
}
inline void Request::add_press_keys(const char* value, size_t size) {
  _impl_.press_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Request.press_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Request::press_keys() const {
  // @@protoc_insertion_point(field_list:Request.press_keys)
  return _impl_.press_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Request::mutable_press_keys() {
  // @@protoc_insertion_point(field_mutable_list:Request.press_keys)
  return &_impl_.press_keys_;
}

// repeated string release_keys = 5;
inline int Request::_internal_release_keys_size() const {
  return _impl_.release_keys_.size();
}
inline int Request::release_keys_size() const {
  return _internal_release_keys_size();
}
inline void Request::clear_release_keys() {
  _impl_.release_keys_.Clear();
}
inline std::string* Request::add_release_keys() {
  std::string* _s = _internal_add_release_keys();
  // @@protoc_insertion_point(field_add_mutable:Request.release_keys)
  return _s;
}
inline const std::string& Request::_internal_release_keys(int index) const {
  return _impl_.release_keys_.Get(index);
}
inline const std::string& Request::release_keys(int index) const {
  // @@protoc_insertion_point(field_get:Request.release_keys)
  return _internal_release_keys(index);
}
inline std::string* Request::mutable_release_keys(int index) {
  // @@protoc_insertion_point(field_mutable:Request.release_keys)
  return _impl_.release_keys_.Mutable(index);
}
inline void Request::set_release_keys(int index, const std::string& value) {
  _impl_.release_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Request.release_keys)
}
inline void Request::set_release_keys(int index, std::string&& value) {
  _impl_.release_keys_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Request.release_keys)
}
inline void Request::set_release_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.release_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Request.release_keys)
}
inline void Request::set_release_keys(int index, const char* value, size_t size) {
  _impl_.release_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Request.release_keys)
}
inline std::string* Request::_internal_add_release_keys() {
  return _impl_.release_keys_.Add();
}
inline void Request::add_release_keys(const std::string& value) {
  _impl_.release_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Request.release_keys)
}
inline void Request::add_release_keys(std::string&& value) {
  _impl_.release_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Request.release_keys)
}
inline void Request::add_release_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.release_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Request.release_keys)
}
inline void Request::add_release_keys(const char* value, size_t size) {
  _impl_.release_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Request.release_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Request::release_keys() const {
  // @@protoc_insertion_point(field_list:Request.release_keys)
  return _impl_.release_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Request::mutable_release_keys() {
  // @@protoc_insertion_point(field_mutable_list:Request.release_keys)
  return &_impl_.release_keys_;
}

// .Point mouse = 6;
inline bool Request::_internal_has_mouse() const {
  return this != internal_default_instance() && _impl_.mouse_ != nullptr;
}
inline bool Request::has_mouse() const {
  return _internal_has_mouse();
}
inline void Request::clear_mouse() {
  if (GetArenaForAllocation() == nullptr && _impl_.mouse_ != nullptr) {
    delete _impl_.mouse_;
  }
  _impl_.mouse_ = nullptr;
}
inline const ::Point& Request::_internal_mouse() const {
  const ::Point* p = _impl_.mouse_;
  return p != nullptr ? *p : reinterpret_cast<const ::Point&>(
      ::_Point_default_instance_);
}
inline const ::Point& Request::mouse() const {
  // @@protoc_insertion_point(field_get:Request.mouse)
  return _internal_mouse();
}
inline void Request::unsafe_arena_set_allocated_mouse(
    ::Point* mouse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mouse_);
  }
  _impl_.mouse_ = mouse;
  if (mouse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Request.mouse)
}
inline ::Point* Request::release_mouse() {
  
  ::Point* temp = _impl_.mouse_;
  _impl_.mouse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Point* Request::unsafe_arena_release_mouse() {
  // @@protoc_insertion_point(field_release:Request.mouse)
  
  ::Point* temp = _impl_.mouse_;
  _impl_.mouse_ = nullptr;
  return temp;
}
inline ::Point* Request::_internal_mutable_mouse() {
  
  if (_impl_.mouse_ == nullptr) {
    auto* p = CreateMaybeMessage<::Point>(GetArenaForAllocation());
    _impl_.mouse_ = p;
  }
  return _impl_.mouse_;
}
inline ::Point* Request::mutable_mouse() {
  ::Point* _msg = _internal_mutable_mouse();
  // @@protoc_insertion_point(field_mutable:Request.mouse)
  return _msg;
}
inline void Request::set_allocated_mouse(::Point* mouse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.mouse_;
  }
  if (mouse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mouse);
    if (message_arena != submessage_arena) {
      mouse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mouse, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mouse_ = mouse;
  // @@protoc_insertion_point(field_set_allocated:Request.mouse)
}

// .Point client_mouse = 7;
inline bool Request::_internal_has_client_mouse() const {
  return this != internal_default_instance() && _impl_.client_mouse_ != nullptr;
}
inline bool Request::has_client_mouse() const {
  return _internal_has_client_mouse();
}
inline void Request::clear_client_mouse() {
  if (GetArenaForAllocation() == nullptr && _impl_.client_mouse_ != nullptr) {
    delete _impl_.client_mouse_;
  }
  _impl_.client_mouse_ = nullptr;
}
inline const ::Point& Request::_internal_client_mouse() const {
  const ::Point* p = _impl_.client_mouse_;
  return p != nullptr ? *p : reinterpret_cast<const ::Point&>(
      ::_Point_default_instance_);
}
inline const ::Point& Request::client_mouse() const {
  // @@protoc_insertion_point(field_get:Request.client_mouse)
  return _internal_client_mouse();
}
inline void Request::unsafe_arena_set_allocated_client_mouse(
    ::Point* client_mouse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.client_mouse_);
  }
  _impl_.client_mouse_ = client_mouse;
  if (client_mouse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Request.client_mouse)
}
inline ::Point* Request::release_client_mouse() {
  
  ::Point* temp = _impl_.client_mouse_;
  _impl_.client_mouse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Point* Request::unsafe_arena_release_client_mouse() {
  // @@protoc_insertion_point(field_release:Request.client_mouse)
  
  ::Point* temp = _impl_.client_mouse_;
  _impl_.client_mouse_ = nullptr;
  return temp;
}
inline ::Point* Request::_internal_mutable_client_mouse() {
  
  if (_impl_.client_mouse_ == nullptr) {
    auto* p = CreateMaybeMessage<::Point>(GetArenaForAllocation());
    _impl_.client_mouse_ = p;
  }
  return _impl_.client_mouse_;
}
inline ::Point* Request::mutable_client_mouse() {
  ::Point* _msg = _internal_mutable_client_mouse();
  // @@protoc_insertion_point(field_mutable:Request.client_mouse)
  return _msg;
}
inline void Request::set_allocated_client_mouse(::Point* client_mouse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.client_mouse_;
  }
  if (client_mouse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(client_mouse);
    if (message_arena != submessage_arena) {
      client_mouse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_mouse, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.client_mouse_ = client_mouse;
  // @@protoc_insertion_point(field_set_allocated:Request.client_mouse)
}

// bool get_keys = 8;
inline void Request::clear_get_keys() {
  _impl_.get_keys_ = false;
}
inline bool Request::_internal_get_keys() const {
  return _impl_.get_keys_;
}
inline bool Request::get_keys() const {
  // @@protoc_insertion_point(field_get:Request.get_keys)
  return _internal_get_keys();
}
inline void Request::_internal_set_get_keys(bool value) {
  
  _impl_.get_keys_ = value;
}
inline void Request::set_get_keys(bool value) {
  _internal_set_get_keys(value);
  // @@protoc_insertion_point(field_set:Request.get_keys)
}

// bool get_mouse = 9;
inline void Request::clear_get_mouse() {
  _impl_.get_mouse_ = false;
}
inline bool Request::_internal_get_mouse() const {
  return _impl_.get_mouse_;
}
inline bool Request::get_mouse() const {
  // @@protoc_insertion_point(field_get:Request.get_mouse)
  return _internal_get_mouse();
}
inline void Request::_internal_set_get_mouse(bool value) {
  
  _impl_.get_mouse_ = value;
}
inline void Request::set_get_mouse(bool value) {
  _internal_set_get_mouse(value);
  // @@protoc_insertion_point(field_set:Request.get_mouse)
}

// bool allow_user_override = 10;
inline void Request::clear_allow_user_override() {
  _impl_.allow_user_override_ = false;
}
inline bool Request::_internal_allow_user_override() const {
  return _impl_.allow_user_override_;
}
inline bool Request::allow_user_override() const {
  // @@protoc_insertion_point(field_get:Request.allow_user_override)
  return _internal_allow_user_override();
}
inline void Request::_internal_set_allow_user_override(bool value) {
  
  _impl_.allow_user_override_ = value;
}
inline void Request::set_allow_user_override(bool value) {
  _internal_set_allow_user_override(value);
  // @@protoc_insertion_point(field_set:Request.allow_user_override)
}

// -------------------------------------------------------------------

// Response

// string error = 1;
inline void Response::clear_error() {
  _impl_.error_.ClearToEmpty();
}
inline const std::string& Response::error() const {
  // @@protoc_insertion_point(field_get:Response.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Response::set_error(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Response.error)
}
inline std::string* Response::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:Response.error)
  return _s;
}
inline const std::string& Response::_internal_error() const {
  return _impl_.error_.Get();
}
inline void Response::_internal_set_error(const std::string& value) {
  
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* Response::_internal_mutable_error() {
  
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* Response::release_error() {
  // @@protoc_insertion_point(field_release:Response.error)
  return _impl_.error_.Release();
}
inline void Response::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Response.error)
}

// bytes image = 2;
inline void Response::clear_image() {
  _impl_.image_.ClearToEmpty();
}
inline const std::string& Response::image() const {
  // @@protoc_insertion_point(field_get:Response.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Response::set_image(ArgT0&& arg0, ArgT... args) {
 
 _impl_.image_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Response.image)
}
inline std::string* Response::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:Response.image)
  return _s;
}
inline const std::string& Response::_internal_image() const {
  return _impl_.image_.Get();
}
inline void Response::_internal_set_image(const std::string& value) {
  
  _impl_.image_.Set(value, GetArenaForAllocation());
}
inline std::string* Response::_internal_mutable_image() {
  
  return _impl_.image_.Mutable(GetArenaForAllocation());
}
inline std::string* Response::release_image() {
  // @@protoc_insertion_point(field_release:Response.image)
  return _impl_.image_.Release();
}
inline void Response::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  _impl_.image_.SetAllocated(image, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.image_.IsDefault()) {
    _impl_.image_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Response.image)
}

// repeated string pressed_keys = 3;
inline int Response::_internal_pressed_keys_size() const {
  return _impl_.pressed_keys_.size();
}
inline int Response::pressed_keys_size() const {
  return _internal_pressed_keys_size();
}
inline void Response::clear_pressed_keys() {
  _impl_.pressed_keys_.Clear();
}
inline std::string* Response::add_pressed_keys() {
  std::string* _s = _internal_add_pressed_keys();
  // @@protoc_insertion_point(field_add_mutable:Response.pressed_keys)
  return _s;
}
inline const std::string& Response::_internal_pressed_keys(int index) const {
  return _impl_.pressed_keys_.Get(index);
}
inline const std::string& Response::pressed_keys(int index) const {
  // @@protoc_insertion_point(field_get:Response.pressed_keys)
  return _internal_pressed_keys(index);
}
inline std::string* Response::mutable_pressed_keys(int index) {
  // @@protoc_insertion_point(field_mutable:Response.pressed_keys)
  return _impl_.pressed_keys_.Mutable(index);
}
inline void Response::set_pressed_keys(int index, const std::string& value) {
  _impl_.pressed_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Response.pressed_keys)
}
inline void Response::set_pressed_keys(int index, std::string&& value) {
  _impl_.pressed_keys_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Response.pressed_keys)
}
inline void Response::set_pressed_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.pressed_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Response.pressed_keys)
}
inline void Response::set_pressed_keys(int index, const char* value, size_t size) {
  _impl_.pressed_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Response.pressed_keys)
}
inline std::string* Response::_internal_add_pressed_keys() {
  return _impl_.pressed_keys_.Add();
}
inline void Response::add_pressed_keys(const std::string& value) {
  _impl_.pressed_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Response.pressed_keys)
}
inline void Response::add_pressed_keys(std::string&& value) {
  _impl_.pressed_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Response.pressed_keys)
}
inline void Response::add_pressed_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.pressed_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Response.pressed_keys)
}
inline void Response::add_pressed_keys(const char* value, size_t size) {
  _impl_.pressed_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Response.pressed_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Response::pressed_keys() const {
  // @@protoc_insertion_point(field_list:Response.pressed_keys)
  return _impl_.pressed_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Response::mutable_pressed_keys() {
  // @@protoc_insertion_point(field_mutable_list:Response.pressed_keys)
  return &_impl_.pressed_keys_;
}

// .Point mouse = 4;
inline bool Response::_internal_has_mouse() const {
  return this != internal_default_instance() && _impl_.mouse_ != nullptr;
}
inline bool Response::has_mouse() const {
  return _internal_has_mouse();
}
inline void Response::clear_mouse() {
  if (GetArenaForAllocation() == nullptr && _impl_.mouse_ != nullptr) {
    delete _impl_.mouse_;
  }
  _impl_.mouse_ = nullptr;
}
inline const ::Point& Response::_internal_mouse() const {
  const ::Point* p = _impl_.mouse_;
  return p != nullptr ? *p : reinterpret_cast<const ::Point&>(
      ::_Point_default_instance_);
}
inline const ::Point& Response::mouse() const {
  // @@protoc_insertion_point(field_get:Response.mouse)
  return _internal_mouse();
}
inline void Response::unsafe_arena_set_allocated_mouse(
    ::Point* mouse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mouse_);
  }
  _impl_.mouse_ = mouse;
  if (mouse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Response.mouse)
}
inline ::Point* Response::release_mouse() {
  
  ::Point* temp = _impl_.mouse_;
  _impl_.mouse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Point* Response::unsafe_arena_release_mouse() {
  // @@protoc_insertion_point(field_release:Response.mouse)
  
  ::Point* temp = _impl_.mouse_;
  _impl_.mouse_ = nullptr;
  return temp;
}
inline ::Point* Response::_internal_mutable_mouse() {
  
  if (_impl_.mouse_ == nullptr) {
    auto* p = CreateMaybeMessage<::Point>(GetArenaForAllocation());
    _impl_.mouse_ = p;
  }
  return _impl_.mouse_;
}
inline ::Point* Response::mutable_mouse() {
  ::Point* _msg = _internal_mutable_mouse();
  // @@protoc_insertion_point(field_mutable:Response.mouse)
  return _msg;
}
inline void Response::set_allocated_mouse(::Point* mouse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.mouse_;
  }
  if (mouse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mouse);
    if (message_arena != submessage_arena) {
      mouse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mouse, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mouse_ = mouse;
  // @@protoc_insertion_point(field_set_allocated:Response.mouse)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
